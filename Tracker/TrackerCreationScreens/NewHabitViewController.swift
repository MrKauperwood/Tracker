//
//  NewHabitViewController.swift
//  Tracker
//
//  Created by Aleksei Bondarenko on 22.9.2024.
//

import UIKit

class NewHabitViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, UITextFieldDelegate {
    
    var selectedSchedule: [Weekday] = []
    
    // MARK: - UI Elements
    let titleLabel: UILabel = {
        let titleLabel = UILabel()
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.text = "–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞"
        titleLabel.font = UIFont.systemFont(ofSize: 16, weight: .regular)
        titleLabel.textAlignment = .center
        
        return titleLabel
    }()
    
    let textField: UITextField = {
        let textField = UITextField()
        textField.placeholder = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞"
        textField.returnKeyType = .go
        
        textField.translatesAutoresizingMaskIntoConstraints = false
        textField.heightAnchor.constraint(equalToConstant: 75).isActive = true
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã (padding)
        textField.leftView = UIView(frame: CGRect(x: 0, y: 0, width: 16, height: 0)) // –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
        textField.leftViewMode = .always
        
        textField.backgroundColor = .lbLightGrey
        textField.layer.cornerRadius = 16
        textField.layer.masksToBounds = true
        
        return textField
    }()
    
    let tableView: UITableView = {
        let tableView = UITableView()
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.isScrollEnabled = false
        
        tableView.backgroundColor = .lbLightGrey
        
        // –†–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
        tableView.layer.cornerRadius = 16
        tableView.layer.masksToBounds = true
        
        return tableView
    }()
    
    let collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()
    
    let cancelButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("–û—Ç–º–µ–Ω–∏—Ç—å", for: .normal)
        
        button.setTitleColor(UIColor(named: "LB_red"), for: .normal) // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        button.layer.borderColor = UIColor(named: "LB_red")?.cgColor // –¶–≤–µ—Ç –±–æ—Ä–¥–µ—Ä–∞ –∏–∑ –∞—Å—Å–µ—Ç–æ–≤
        button.layer.borderWidth = 1 // –®–∏—Ä–∏–Ω–∞ –±–æ—Ä–¥–µ—Ä–∞
        button.layer.cornerRadius = 16 // –†–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
        button.translatesAutoresizingMaskIntoConstraints = false
        
        return button
    }()
    
    let createButton: UIButton = {
        
        let button = UIButton(type: .system)
        button.setTitle("–°–æ–∑–¥–∞—Ç—å", for: .normal)
        button.setTitleColor(UIColor(named: "LB_white"), for: .normal)
        button.layer.borderColor = UIColor(named: "LB_white")?.cgColor
        button.backgroundColor = UIColor(named: "LB_grey")
        button.layer.borderWidth = 1
        button.layer.cornerRadius = 16
        button.translatesAutoresizingMaskIntoConstraints = false
        
        return button
    }()
    
    let buttonStackView: UIStackView = {
        let stackView = UIStackView()
        stackView.axis = .horizontal
        stackView.distribution = .fillEqually // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        stackView.spacing = 10 // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
        stackView.translatesAutoresizingMaskIntoConstraints = false
        return stackView
    }()
    
    // Data arrays
    let tableData = ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]
    let emojis = ["üòä", "üòª", "üå∏", "üê∂", "‚ù§Ô∏è", "üò±", "üòá", "üò°", "ü•∂", "ü§î", "üôå", "üçî", "ü•¶", "üèì", "üèÖ", "üé∏", "üèñ", "üò™"]
    let colors: [UIColor] = [
        .lbCS1Red, .lbCS2Orange, .lbCS3Blue, .lbCS4Purple, .lbCS5Green, .lbCS6Pink,
        .lbCS7LightPink, .lbCS8BrightBlue, .lbCS9MintGreen, .lbCS10DarkBlue,
        .lbCS11OrangeRed, .lbCS12BrightPink, .lbCS13Peach, .lbCS14LightBlue,
        .lbCS15Violet, .lbCS16PurplePink, .lbCS17Lilac, .lbCS18BrightGreen]
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∂–µ—Å—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ª—é–±–æ–µ –º–µ—Å—Ç–æ
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleTapOutside))
        tapGesture.cancelsTouchesInView = false
        view.addGestureRecognizer(tapGesture)
        
        textField.delegate = self
        
        validateForm()
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Supplementary View
        collectionView.register(SectionHeaderView.self, forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: SectionHeaderView.identifier)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞—Ä–≥–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        cancelButton.addTarget(self, action: #selector(cancelButtonTapped), for: .touchUpInside)
        createButton.addTarget(self, action: #selector(createButtonTapped), for: .touchUpInside)
        
        textField.addTarget(self, action: #selector(textFieldDidChange), for: .editingChanged)
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —è—á–µ–µ–∫
        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: "emojiCell")
        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: "colorCell")
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è table view
        tableView.register(CustomTableViewCellForNewHabit.self, forCellReuseIdentifier: "CustomCellForNewHabit")
        
        view.backgroundColor = .white
//        title = "–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞"
        
        // Setup table view
        tableView.delegate = self
        tableView.dataSource = self
        
        // Register cell for table view
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: "cell")
        
        // Setup collection views
        collectionView.delegate = self
        collectionView.dataSource = self
        
        setupUI()
    }
    
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–ª–µ–≥–∞—Ç–∞
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder() // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        validateForm() // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        return true
    }
    
    @objc func handleTapOutside() {
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        textField.resignFirstResponder()

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º—ã, –∫–∞–∫ –≤ –º–µ—Ç–æ–¥–µ `textFieldShouldReturn`
        validateForm()
    }
    
    @objc private func cancelButtonTapped() {
        dismiss(animated: true, completion: nil) // –ó–∞–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }
    
    @objc private func textFieldDidChange() {
        validateForm()
    }
    
    // MARK: - Setup UI
    private func setupUI() {
        view.addSubview(titleLabel)
        view.addSubview(textField)
        view.addSubview(tableView)
        view.addSubview(collectionView)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–µ–∫
        buttonStackView.addArrangedSubview(cancelButton)
        buttonStackView.addArrangedSubview(createButton)
        
        view.addSubview(buttonStackView)
        
        // Layout constraints
        NSLayoutConstraint.activate([
            
            // Title layout
            titleLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            titleLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            
            // Tracker's name text field layout
            textField.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 24),
            textField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            textField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            
            // Tracker's settings Table view layout
            tableView.topAnchor.constraint(equalTo: textField.bottomAnchor, constant: 16),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            tableView.heightAnchor.constraint(equalToConstant: 150),
            
            // Emoji collection view layout
            collectionView.topAnchor.constraint(equalTo: tableView.bottomAnchor, constant: 16),
            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
//            collectionView.heightAnchor.constraint(equalToConstant: calculateCollectionHeight()),
            collectionView.bottomAnchor.constraint(equalTo: buttonStackView.topAnchor, constant: -16),
            
            // Layout –¥–ª—è buttonStackView
            buttonStackView.topAnchor.constraint(equalTo: collectionView.bottomAnchor, constant: 16),
            buttonStackView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            buttonStackView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            buttonStackView.heightAnchor.constraint(equalToConstant: 60),
            buttonStackView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -16),
        ])
    }
    
    func validateForm() {
        let isTrackerNameValid = !(textField.text?.isEmpty ?? true)
        let isScheduleSelected = !selectedSchedule.isEmpty
        let isCategorySelected = true // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        if isTrackerNameValid && isScheduleSelected && isCategorySelected {
            createButton.isEnabled = true
            createButton.backgroundColor = UIColor(named: "LB_black")
        } else {
            createButton.isEnabled = false
            createButton.backgroundColor = UIColor(named: "LB_grey")
        }
    }
    
    // MARK: - Table view delegate and data source
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return tableData.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CustomCellForNewHabit", for: indexPath) as! CustomTableViewCellForNewHabit
        cell.titleLabel.text = tableData[indexPath.row]

        if indexPath.row == 1 {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            if selectedSchedule.count == Weekday.allCases.count {
                cell.descriptionLabel.text = "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"
            } else {
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –Ω–µ –≤—Å–µ –¥–Ω–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –ø–æ—Ä—è–¥–∫—É –Ω–µ–¥–µ–ª–∏ –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                let sortedDays = selectedSchedule.sorted { Weekday.orderedWeekdays.firstIndex(of: $0)! < Weekday.orderedWeekdays.firstIndex(of: $1)! }
                cell.descriptionLabel.text = sortedDays.isEmpty ? "" : sortedDays.map { $0.shortName }.joined(separator: ", ")
            }
        } else if indexPath.row == 0 {
            cell.descriptionLabel.text = "–í–∞–∂–Ω–æ–µ"
        }

        cell.backgroundColor = .clear
        cell.accessoryType = .disclosureIndicator
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 75
    }
    
    // MARK: - Collection view delegate and data source
    
    // MARK: - Collection view number of sections
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 2 // –°–µ–∫—Ü–∏—è 0 –¥–ª—è —ç–º–æ–¥–∑–∏, —Å–µ–∫—Ü–∏—è 1 –¥–ª—è —Ü–≤–µ—Ç–æ–≤
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if section == 0 {
            return emojis.count
        } else {
            return colors.count
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: SectionHeaderView.identifier, for: indexPath) as! SectionHeaderView
        
        if indexPath.section == 0 {
            header.titleLabel.text = "Emoji"
        } else {
            header.titleLabel.text = "–¶–≤–µ—Ç"
        }
        
        return header
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: collectionView.frame.width, height: 50)
    }
    
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if indexPath.section == 0 {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "emojiCell", for: indexPath)
            let emojiLabel = UILabel()
            emojiLabel.text = emojis[indexPath.item]
            emojiLabel.font = UIFont.systemFont(ofSize: 32)
            emojiLabel.translatesAutoresizingMaskIntoConstraints = false
            cell.contentView.addSubview(emojiLabel)
            NSLayoutConstraint.activate([
                emojiLabel.centerXAnchor.constraint(equalTo: cell.contentView.centerXAnchor),
                emojiLabel.centerYAnchor.constraint(equalTo: cell.contentView.centerYAnchor)
            ])
            return cell
        } else {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "colorCell", for: indexPath)
            cell.backgroundColor = colors[indexPath.item]
            cell.layer.cornerRadius = 8
            return cell
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        if indexPath.section == 1 {
            // –†–∞–∑–º–µ—Ä —è—á–µ–µ–∫ –¥–ª—è —Å–µ–∫—Ü–∏–∏ —Å –ø–∞–ª–∏—Ç—Ä–æ–π —Ü–≤–µ—Ç–æ–≤
            return CGSize(width: 52, height: 52)
        } else {
            // –†–∞–∑–º–µ—Ä —è—á–µ–µ–∫ –¥–ª—è —Å–µ–∫—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
            return CGSize(width: 52, height: 52)
        }
    }
    
    func calculateCollectionHeight() -> CGFloat {
        let numberOfItemsPerRow: CGFloat = 6
        let itemHeight: CGFloat = 52
        let spacing: CGFloat = 16
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è —Å–µ–∫—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
        let numberOfRowsEmoji = ceil(CGFloat(emojis.count) / numberOfItemsPerRow)
        let emojiHeight = (numberOfRowsEmoji * itemHeight) + ((numberOfRowsEmoji - 1) * spacing)
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è —Å–µ–∫—Ü–∏–∏ —Å —Ü–≤–µ—Ç–∞–º–∏
        let numberOfRowsColors = ceil(CGFloat(colors.count) / numberOfItemsPerRow)
        let colorsHeight = (numberOfRowsColors * itemHeight) + ((numberOfRowsColors - 1) * spacing)
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
        let headerHeight = self.collectionView(
            collectionView,
            layout: collectionView.collectionViewLayout as! UICollectionViewFlowLayout,
            referenceSizeForHeaderInSection: 0
        ).height
        
        return emojiHeight + colorsHeight + (headerHeight * 2) // –£—á–∏—Ç—ã–≤–∞–µ–º –¥–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if indexPath.row == 1 { // –î–ª—è —Å—Ç—Ä–æ–∫–∏ —Å "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            let scheduleVC = ScheduleViewController()
            scheduleVC.selectedDays = Set(selectedSchedule)
            scheduleVC.onScheduleSelected = { [weak self] selectedDays in
                self?.selectedSchedule = Array(selectedDays) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏
                self?.tableView.reloadData() // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                self?.validateForm() // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
            }
            
            let navController = UINavigationController(rootViewController: scheduleVC)
            present(navController, animated: true, completion: nil)
        }
    }
    
    @objc func createButtonTapped() {
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥–µ–Ω–æ –ª–∏ –∏–º—è —Ç—Ä–µ–∫–µ—Ä–∞
        guard let trackerName = textField.text, !trackerName.isEmpty else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–º—è –Ω–µ –≤–≤–µ–¥–µ–Ω–æ
            return
        }
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∑–∂–µ)
        let categoryTitle = "–û–±—É—á–µ–Ω–∏–µ"
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –∏ —ç–º–æ–¥–∑–∏. –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤—ã–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ (–ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞)
        let selectedColor = colors.first ?? .lbCS13Peach
        let selectedEmoji = emojis.first ?? "üòä"
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä
        let newTracker = Tracker(
            id: UUID(),
            name: trackerName,
            color: selectedColor,
            emoji: selectedEmoji,
            schedule: selectedSchedule // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        )
        
        if let parentVC = ((presentingViewController?.presentingViewController as? TabBarController)?.selectedViewController as? UINavigationController)?.viewControllers.first(where: { $0 is TrackersViewController }) as? TrackersViewController {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–µ–∫, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            parentVC.addTracker(newTracker, to: categoryTitle)
            // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            let currentWeekday = parentVC.getWeekday(from: parentVC.selectedDate)
            parentVC.filterCategories(by: currentWeekday)
            
            parentVC.collectionView.reloadData() // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            navigationController?.popViewController(animated: true) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É
        } else if let parentVC = presentingViewController?.presentingViewController as? TrackersViewController {
            // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±—ã–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –º–æ–¥–∞–ª—å–Ω–æ
            parentVC.addTracker(newTracker, to: categoryTitle)
            parentVC.collectionView.reloadData() // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            dismiss(animated: true, completion: nil) // –ó–∞–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ TrackersViewController")
        }
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        presentingViewController?.presentingViewController?.dismiss(animated: true, completion: nil)
    }
}
