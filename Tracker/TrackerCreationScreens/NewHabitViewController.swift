//
//  NewHabitViewController.swift
//  Tracker
//
//  Created by Aleksei Bondarenko on 22.9.2024.
//

import UIKit

final class NewHabitViewController: UIViewController {
    
    // MARK: - Public Properties
    
    var trackerType: TrackerType = .habit
    var trackerStore: TrackerStore!
    var trackerCategoryStore: TrackerCategoryStore!
    var trackerRecordStore: TrackerRecordStore!
    
    // MARK: - Private Properties
    
    private var selectedSchedule: [Weekday] = []
    private var selectedEmoji: String?
    private var selectedColor: UIColor?
    
    // MARK: - UI Elements
    
    private let scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        return scrollView
    }()
    
    private let contentStackView: UIStackView = {
        let stackView = UIStackView()
        stackView.axis = .vertical
        stackView.spacing = 16
        stackView.translatesAutoresizingMaskIntoConstraints = false
        return stackView
    }()
    
    private let titleLabel: UILabel = {
        let titleLabel = UILabel()
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.text = "–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞"
        
        titleLabel.font = UIFont.systemFont(ofSize: 16, weight: .medium)
        titleLabel.textAlignment = .center
        
        return titleLabel
    }()
    
    private let textField: UITextField = {
        let textField = UITextField()
        textField.placeholder = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞"
        textField.returnKeyType = .go
        
        textField.translatesAutoresizingMaskIntoConstraints = false
        textField.heightAnchor.constraint(equalToConstant: 75).isActive = true
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã (padding)
        textField.leftView = UIView(frame: CGRect(x: 0, y: 0, width: 16, height: 0)) // –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
        textField.leftViewMode = .always
        
        textField.backgroundColor = .lbBackground
        textField.layer.cornerRadius = 16
        textField.layer.masksToBounds = true
        
        return textField
    }()
    
    private let errorLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.textColor = .lbRed
        label.font = UIFont.systemFont(ofSize: 17, weight: .regular)
        label.textAlignment = .center
        label.isHidden = true // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞
        return label
    }()
    
    private let clearButtonContainer: UIView = {
        // –£—á–∏—Ç—ã–≤–∞—è —à–∏—Ä–∏–Ω—É –∫–Ω–æ–ø–∫–∏ (17) –∏ –æ—Ç—Å—Ç—É–ø (12), —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —à–∏—Ä–∏–Ω–æ–π 29
        let container = UIView(frame: CGRect(x: 0, y: 0, width: 29, height: 17))
        return container
    }()
    
    private let clearButton: UIButton = {
        let button = UIButton(type: .custom)
        button.setImage(UIImage(systemName: "xmark.circle.fill"), for: .normal)
        button.tintColor = .gray
        button.frame = CGRect(x: 0, y: 0, width: 17, height: 17)
        button.addTarget(self, action: #selector(clearTextField), for: .touchUpInside)
        button.isHidden = true // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞
        return button
    }()
    
    private let tableView: UITableView = {
        let tableView = UITableView()
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.isScrollEnabled = false
        
        tableView.backgroundColor = .lbBackground
        
        // –†–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
        tableView.layer.cornerRadius = 16
        tableView.layer.masksToBounds = true
        
        return tableView
    }()
    
    private let collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.isScrollEnabled = false // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        return collectionView
    }()
    
    private let cancelButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("–û—Ç–º–µ–Ω–∏—Ç—å", for: .normal)
        
        button.setTitleColor(UIColor(named: "LB_red"), for: .normal) // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        button.layer.borderColor = UIColor(named: "LB_red")?.cgColor // –¶–≤–µ—Ç –±–æ—Ä–¥–µ—Ä–∞ –∏–∑ –∞—Å—Å–µ—Ç–æ–≤
        button.layer.borderWidth = 1 // –®–∏—Ä–∏–Ω–∞ –±–æ—Ä–¥–µ—Ä–∞
        button.layer.cornerRadius = 16 // –†–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
        button.translatesAutoresizingMaskIntoConstraints = false
        
        button.titleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .medium)
        
        return button
    }()
    
    private let createButton: UIButton = {
        
        let button = UIButton(type: .system)
        button.setTitle("–°–æ–∑–¥–∞—Ç—å", for: .normal)
        button.setTitleColor(UIColor(named: "LB_white"), for: .normal)
        button.layer.borderColor = UIColor(named: "LB_white")?.cgColor
        button.backgroundColor = UIColor(named: "LB_grey")
        button.layer.borderWidth = 1
        button.layer.cornerRadius = 16
        button.translatesAutoresizingMaskIntoConstraints = false
        
        button.titleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .medium)
        
        return button
    }()
    
    private let buttonStackView: UIStackView = {
        let stackView = UIStackView()
        stackView.axis = .horizontal
        stackView.distribution = .fillEqually // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        stackView.spacing = 10 // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
        stackView.translatesAutoresizingMaskIntoConstraints = false
        return stackView
    }()
    
    private var tableData: [String] {
        return trackerType == .habit ? ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"] : ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
    }
    private let emojis = ["üòä", "üòª", "üå∏", "üê∂", "‚ù§Ô∏è", "üò±", "üòá", "üò°", "ü•∂", "ü§î", "üôå", "üçî", "ü•¶", "üèì", "üèÖ", "üé∏", "üèñ", "üò™"]
    private let colors: [UIColor] = [
        .lbCS1Red, .lbCS2Orange, .lbCS3Blue, .lbCS4Purple, .lbCS5Green, .lbCS6Pink,
        .lbCS7LightPink, .lbCS8BrightBlue, .lbCS9MintGreen, .lbCS10DarkBlue,
        .lbCS11OrangeRed, .lbCS12BrightPink, .lbCS13Peach, .lbCS14LightBlue,
        .lbCS15Violet, .lbCS16PurplePink, .lbCS17Lilac, .lbCS18BrightGreen]
    
    // MARK: - Overrides Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        Logger.log("–≠–∫—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–µ–∫–µ—Ä–∞
        titleLabel.text = trackerType == .habit ? "–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞" : "–ù–æ–≤–æ–µ –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–µ—Å—Ç–∏–∫–∞ —Å –æ—Ç—Å—Ç—É–ø–æ–º
        clearButton.translatesAutoresizingMaskIntoConstraints = false
        clearButtonContainer.addSubview(clearButton)
        
        NSLayoutConstraint.activate([
            clearButton.leadingAnchor.constraint(equalTo: clearButtonContainer.leadingAnchor),
            clearButton.centerYAnchor.constraint(equalTo: clearButtonContainer.centerYAnchor),
            clearButton.widthAnchor.constraint(equalToConstant: 17),
            clearButton.heightAnchor.constraint(equalToConstant: 17),
            
            clearButton.trailingAnchor.constraint(equalTo: clearButtonContainer.trailingAnchor, constant: -12)
        ])
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∞–≤–æ–≥–æ –≤–∏–¥–∞ –¥–ª—è UITextField
        textField.rightView = clearButtonContainer
        textField.rightViewMode = .whileEditing
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∂–µ—Å—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ª—é–±–æ–µ –º–µ—Å—Ç–æ
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleTapOutside))
        tapGesture.cancelsTouchesInView = false
        view.addGestureRecognizer(tapGesture)
        
        textField.delegate = self
        
        validateForm()
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Supplementary View
        collectionView.register(SectionHeaderView.self, forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: SectionHeaderView.identifier)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞—Ä–≥–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        cancelButton.addTarget(self, action: #selector(cancelButtonTapped), for: .touchUpInside)
        createButton.addTarget(self, action: #selector(createButtonTapped), for: .touchUpInside)
        
        textField.addTarget(self, action: #selector(textFieldDidChange), for: .editingChanged)
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —è—á–µ–µ–∫
        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: "emojiCell")
        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: "colorCell")
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è table view
        tableView.register(CustomTableViewCellForNewHabit.self, forCellReuseIdentifier: "CustomCellForNewHabit")
        
        view.backgroundColor = .white
        
        // Setup table view
        tableView.delegate = self
        tableView.dataSource = self
        
        // Register cell for table view
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: "cell")
        
        // Setup collection views
        collectionView.delegate = self
        collectionView.dataSource = self
        
        setupUI()
    }
    
    // MARK: - Private Methods
    
    private func setupUI() {
        // –î–æ–±–∞–≤–ª—è–µ–º scrollView –Ω–∞ –≥–ª–∞–≤–Ω—ã–π view
        view.addSubview(scrollView)
        
        // –î–æ–±–∞–≤–ª—è–µ–º contentStackView –≤–Ω—É—Ç—Ä—å scrollView
        scrollView.addSubview(contentStackView)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–µ–∫
        buttonStackView.addArrangedSubview(cancelButton)
        buttonStackView.addArrangedSubview(createButton)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ contentStackView
        contentStackView.addArrangedSubview(titleLabel)
        contentStackView.addArrangedSubview(textField)
        contentStackView.addArrangedSubview(errorLabel)
        contentStackView.addArrangedSubview(tableView)
        contentStackView.addArrangedSubview(collectionView)
        contentStackView.addArrangedSubview(buttonStackView)
        
        contentStackView.setCustomSpacing(38, after: titleLabel)
        
        // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è scrollView
        NSLayoutConstraint.activate([
            scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è contentStackView
        NSLayoutConstraint.activate([
            contentStackView.topAnchor.constraint(equalTo: scrollView.topAnchor, constant: 30),
            contentStackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 16),
            contentStackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: -16),
            contentStackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            contentStackView.widthAnchor.constraint(equalTo: scrollView.widthAnchor, constant: -32)
        ])
        
        // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è tableView (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã—Å–æ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫)
        NSLayoutConstraint.activate([
            tableView.heightAnchor.constraint(equalToConstant: CGFloat(75 * tableData.count)) // –í—ã—Å–æ—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã
        ])
        
        // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è collectionView (–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª—è—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        NSLayoutConstraint.activate([
            collectionView.heightAnchor.constraint(equalToConstant: calculateCollectionHeight())
        ])
        
        // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è buttonStackView (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞)
        NSLayoutConstraint.activate([
            buttonStackView.heightAnchor.constraint(equalToConstant: 60)
        ])
    }
    
    @objc private func handleTapOutside() {
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        textField.resignFirstResponder()
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º—ã, –∫–∞–∫ –≤ –º–µ—Ç–æ–¥–µ `textFieldShouldReturn`
        validateForm()
    }
    
    @objc private func cancelButtonTapped() {
        dismiss(animated: true, completion: nil) // –ó–∞–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }
    
    @objc private func textFieldDidChange() {
        clearButton.isHidden = textField.text?.isEmpty ?? true
        validateForm()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if let text = textField.text, text.count > 38 {
            errorLabel.text = "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 38 —Å–∏–º–≤–æ–ª–æ–≤"
            errorLabel.isHidden = false
        } else {
            errorLabel.isHidden = true
        }
    }
    
    @objc private func clearTextField() {
        textField.text = ""
        clearButton.isHidden = true
        validateForm() // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è
        errorLabel.isHidden = true
    }
    
    private func validateForm() {
        let isTrackerNameValid = !(textField.text?.isEmpty ?? true) && (textField.text?.count ?? 0) <= 38
        
        let isScheduleSelected = trackerType == .habit ? !selectedSchedule.isEmpty : true
        let isCategorySelected = true // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        // –ù–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç–∞
        let isEmojiSelected = selectedEmoji != nil
        let isColorSelected = selectedColor != nil
        
        if isTrackerNameValid && isScheduleSelected && isCategorySelected && isEmojiSelected && isColorSelected {
            createButton.isEnabled = true
            createButton.backgroundColor = UIColor(named: "LB_black")
        } else {
            createButton.isEnabled = false
            createButton.backgroundColor = UIColor(named: "LB_grey")
        }
        
        Logger.log("–§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞: \(isTrackerNameValid && isScheduleSelected && isCategorySelected && isEmojiSelected && isColorSelected)", level: .debug)
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: SectionHeaderView.identifier, for: indexPath) as! SectionHeaderView
        
        if indexPath.section == 0 {
            header.title = "Emoji"
        } else {
            header.title = "–¶–≤–µ—Ç"
        }
        
        return header
    }
    
    func calculateCollectionHeight() -> CGFloat {
        let numberOfItemsPerRow: CGFloat = 6
        let itemHeight: CGFloat = 52
        let spacing: CGFloat = 10
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è —Å–µ–∫—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
        let numberOfRowsEmoji = ceil(CGFloat(emojis.count) / numberOfItemsPerRow)
        let emojiHeight = (numberOfRowsEmoji * itemHeight) + ((numberOfRowsEmoji - 1) * spacing)
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è —Å–µ–∫—Ü–∏–∏ —Å —Ü–≤–µ—Ç–∞–º–∏
        let numberOfRowsColors = ceil(CGFloat(colors.count) / numberOfItemsPerRow)
        let colorsHeight = (numberOfRowsColors * itemHeight) + ((numberOfRowsColors - 1) * spacing)
        
        // –í—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–µ—Å–ª–∏ —É –≤–∞—Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        let headerHeight: CGFloat = 50.0 // –í—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
        
        // –û–±—â–∞—è –≤—ã—Å–æ—Ç–∞: –≤—ã—Å–æ—Ç–∞ —ç–º–æ–¥–∑–∏ + –≤—ã—Å–æ—Ç–∞ —Ü–≤–µ—Ç–æ–≤ + –≤—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        let totalHeight = emojiHeight + colorsHeight + (headerHeight * 2) + 30
        
        return totalHeight
    }
    
    @objc func createButtonTapped() {
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥–µ–Ω–æ –ª–∏ –∏–º—è —Ç—Ä–µ–∫–µ—Ä–∞
        guard let trackerName = textField.text, !trackerName.isEmpty else {
            return
        }
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∑–∂–µ)
        let categoryTitle = trackerType == .habit ? "–û–±—É—á–µ–Ω–∏–µ" : "–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"
        
        guard let selectedEmoji = selectedEmoji else {
            return
        }
        
        guard let selectedColor = selectedColor else {
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä
        let newTracker = Tracker(
            id: UUID(),
            name: trackerName,
            color: selectedColor,
            emoji: selectedEmoji,
            schedule: trackerType == .habit ? selectedSchedule : [],
            trackerType: trackerType
        )
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let newCategory = TrackerCategory(title: categoryTitle, trackers: [])
        
        // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä –≤ CoreData
        do {
            try trackerStore.addTracker(newTracker, to: newCategory)
            
        } catch {
            Logger.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞: \(error)", level: .error)
            return
        }
        
        if let parentVC = ((presentingViewController?.presentingViewController as? TabBarController)?.selectedViewController as? UINavigationController)?.viewControllers.first(where: { $0 is TrackersViewController }) as? TrackersViewController {
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –≤ TrackersViewController
            parentVC.setupTrackerStore()
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–µ–∫, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            parentVC.addTracker(newTracker, to: categoryTitle)
            
            // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            parentVC.filterCategories(from: parentVC.getCategories, for: parentVC.selectedDate)
            
            parentVC.reloadData() // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            navigationController?.popViewController(animated: true) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É
        } else if let parentVC = presentingViewController?.presentingViewController as? TrackersViewController {
            // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±—ã–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –º–æ–¥–∞–ª—å–Ω–æ
            parentVC.addTracker(newTracker, to: categoryTitle)
            parentVC.reloadData() // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            dismiss(animated: true, completion: nil) // –ó–∞–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ TrackersViewController")
        }
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        presentingViewController?.presentingViewController?.dismiss(animated: true, completion: nil)
        
        Logger.log("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä: \(trackerName) —Å —ç–º–æ–¥–∑–∏ \(selectedEmoji) –∏ —Ü–≤–µ—Ç–æ–º \(selectedColor)")
    }
}


// MARK: - UITableViewDelegate
extension NewHabitViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 75
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if trackerType == .habit && indexPath.row == 1 { // –î–ª—è —Å—Ç—Ä–æ–∫–∏ —Å "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            let scheduleVC = ScheduleViewController()
            scheduleVC.selectedDays = Set(selectedSchedule)
            scheduleVC.onScheduleSelected = { [weak self] selectedDays in
                self?.selectedSchedule = Array(selectedDays) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏
                self?.tableView.reloadData() // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                self?.validateForm() // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
            }
            
            let navController = UINavigationController(rootViewController: scheduleVC)
            present(navController, animated: true, completion: nil)
        }
        Logger.log("–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º \(indexPath.row) –≤ —Ç–∞–±–ª–∏—Ü–µ")
    }
}


// MARK: - UITableViewDataSource
extension NewHabitViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return trackerType == .habit ? 2 : 1 // –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞, 2 —Å—Ç—Ä–æ–∫–∏, –∏–Ω–∞—á–µ 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CustomCellForNewHabit", for: indexPath) as! CustomTableViewCellForNewHabit
        cell.configureTitle(tableData[indexPath.row])
        
        if indexPath.row == 1 {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            if trackerType == .habit {
                // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤—ã—á–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                if selectedSchedule.count == Weekday.allCases.count {
                    cell.configureDescription("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å")
                } else {
                    let sortedDays = selectedSchedule.sorted { Weekday.orderedWeekdays.firstIndex(of: $0)! < Weekday.orderedWeekdays.firstIndex(of: $1)! }
                    cell.configureDescription(sortedDays.isEmpty ? "" : sortedDays.map { $0.shortName }.joined(separator: ", "))
                }
            }
        } else if indexPath.row == 0 {
            cell.configureDescription("–í–∞–∂–Ω–æ–µ")
        }
        
        cell.backgroundColor = .clear
        cell.accessoryType = .disclosureIndicator
        return cell
    }
}


// MARK: - UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout
extension NewHabitViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    
    // MARK: - Private Methods
    private func configureEmojiCell(for collectionView: UICollectionView, at indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "emojiCell", for: indexPath)
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–≤–∏–¥—ã —è—á–µ–π–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        cell.contentView.subviews.forEach { $0.removeFromSuperview() }
        
        let emojiLabel = UILabel()
        emojiLabel.text = emojis[indexPath.item]
        emojiLabel.font = UIFont.systemFont(ofSize: 32)
        emojiLabel.translatesAutoresizingMaskIntoConstraints = false
        cell.contentView.addSubview(emojiLabel)
        
        NSLayoutConstraint.activate([
            emojiLabel.centerXAnchor.constraint(equalTo: cell.contentView.centerXAnchor),
            emojiLabel.centerYAnchor.constraint(equalTo: cell.contentView.centerYAnchor)
        ])
        
        // –ú–µ–Ω—è–µ–º —Ñ–æ–Ω —è—á–µ–π–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã, –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏ –≤—ã–±—Ä–∞–Ω–æ
        if selectedEmoji == emojis[indexPath.item] {
            cell.backgroundColor = .lbLightGrey
            cell.layer.cornerRadius = 16
        } else {
            cell.backgroundColor = .clear
            cell.layer.cornerRadius = 0
        }
        
        return cell
    }
    
    private func configureColorCell(for collectionView: UICollectionView, at indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "colorCell", for: indexPath)
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–≤–∏–¥—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —è—á–µ–π–∫–∏
        cell.contentView.subviews.forEach { $0.removeFromSuperview() }
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ü–≤–µ—Ç–∞
        let colorView = UIView()
        colorView.backgroundColor = colors[indexPath.item]
        colorView.layer.cornerRadius = 8
        colorView.layer.masksToBounds = true
        colorView.translatesAutoresizingMaskIntoConstraints = false
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ contentView —è—á–µ–π–∫–∏
        cell.contentView.addSubview(colorView)
        
        // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ (—Ä–∞–∑–º–µ—Ä 40x40, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ —è—á–µ–π–∫–∏)
        NSLayoutConstraint.activate([
            colorView.widthAnchor.constraint(equalToConstant: 40),
            colorView.heightAnchor.constraint(equalToConstant: 40),
            colorView.centerXAnchor.constraint(equalTo: cell.contentView.centerXAnchor),
            colorView.centerYAnchor.constraint(equalTo: cell.contentView.centerYAnchor)
        ])
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
        if selectedColor == colors[indexPath.item] {
            cell.layer.borderWidth = 3
            cell.layer.borderColor = colors[indexPath.item].withAlphaComponent(0.3).cgColor
            cell.layer.cornerRadius = 8
        } else {
            cell.layer.borderWidth = 0
        }
        
        return cell
    }
    
    // MARK: - Public Methods
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 2 // –°–µ–∫—Ü–∏—è 0 –¥–ª—è —ç–º–æ–¥–∑–∏, —Å–µ–∫—Ü–∏—è 1 –¥–ª—è —Ü–≤–µ—Ç–æ–≤
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return section == 0 ? emojis.count : colors.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if indexPath.section == 0 {
            return configureEmojiCell(for: collectionView, at: indexPath)
        } else {
            return configureColorCell(for: collectionView, at: indexPath)
        }
    }
    
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if indexPath.section == 0 {
            // –°–µ–∫—Ü–∏—è —Å —ç–º–æ–¥–∑–∏
            selectedEmoji = emojis[indexPath.item]
            collectionView.reloadSections(IndexSet(integer: 0)) // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ü–∏—é —ç–º–æ–¥–∑–∏
            validateForm()
            Logger.log("–í—ã–±—Ä–∞–Ω —ç–º–æ–¥–∑–∏: \(selectedEmoji ?? "")")
        } else {
            selectedColor = colors[indexPath.item]
            collectionView.reloadSections(IndexSet(integer: 1)) // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ü–∏—é —ç–º–æ–¥–∑–∏
            validateForm()
            Logger.log("–í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç: \(selectedColor?.description ?? "")")
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let numberOfItemsPerRow: CGFloat = 6
        let spacing: CGFloat = 10 // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
        let totalSpacing = spacing * (numberOfItemsPerRow - 1)
        let width = (collectionView.bounds.width - totalSpacing) / numberOfItemsPerRow
        return CGSize(width: width, height: width)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 5 // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0 // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: collectionView.frame.width, height: 50)
    }
}


// MARK: - UITextFieldDelegate
extension NewHabitViewController: UITextFieldDelegate {
    
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–ª–µ–≥–∞—Ç–∞
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder() // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        validateForm() // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        return true
    }
}
